- hosts: localhost
  tasks:

    - name: debug vms ips
      debug:
        msg: "{{ vm_ips }}"

    - name: Add VMs to inventory
      import_tasks: ../playbooks/tasks/inventory-add-vms.yml

    - name: Make sure VMs are running
      import_tasks: ../playbooks/tasks/vm-started.yml

    - name: Create output directory
      ansible.builtin.file:
        path: "{{ local_working_directory }}out/{{ name_ransomware }}"
        state: directory


- hosts: checker
  become: true
  tasks:

    - name: Trasferisci filechecker jar
      ansible.builtin.copy:
        src: "{{ local_working_directory }}{{ local_path_files_checker }}/"
        dest: "{{ remote_working_dir_filechecker }}"
        force: "{{ transfer_force_filechecker }}"

    - name: Crea mounting point per Windows, storage condiviso
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
      loop:
        - "{{ path_mnt_win }}"
        - /mnt/shared

    - name: Monta disco Windows
      ansible.posix.mount:
        path: "{{ path_mnt_win }}"
        src: /dev/sdb1
        state: mounted
        fstype: ntfs

    - name: Crea partizione storage condiviso
      community.general.parted:
        device: /dev/sdc
        number: 1
        state: present

    - name: Formatta partizione storage condiviso
      community.general.filesystem:
        dev: /dev/sdc1
        fstype: ext4

    - name: Monta storage condiviso
      ansible.posix.mount:
        path: /mnt/shared
        src: /dev/sdc1
        state: mounted
        fstype: ext4

    - name: Filechecker check
      ansible.builtin.command:
        cmd: >
          java -jar {{ path_filechecker }} check {{ remote_working_directory_checker }}cleanWindowsChecksum {{ path_report }} {{ target_dir }}
          > {{ path_log_filechecker_out }} 2>&1
        chdir: "{{ remote_working_dir_filechecker }}"
      when: do_check

    - name: Filechecker sss restore
      ansible.builtin.shell:
        cmd: >
          java -jar {{ path_filechecker }} restore --debug -l={{ path_log_filechecker }} -e={{ target_dir }}/AppData --dry-run
          {{ remote_working_directory_checker }}cleanWindowsChecksum {{ path_report_shards }} {{ path_report }} {{ target_dir }}
          > {{ path_log_filechecker_out }} 2>&1
        chdir: "{{ remote_working_dir_filechecker }}"
      when: do_restore and not restore_delete

    - name: Filechecker sss restore with delete
      ansible.builtin.shell:
        cmd: >
          java -jar {{ path_filechecker }} restore --debug -l={{ path_log_filechecker }} -e={{ target_dir }}/AppData --dry-run --delete
          {{ remote_working_directory_checker }}cleanWindowsChecksum {{ path_report_shards }} {{ path_report }} {{ target_dir }}
          > {{ path_log_filechecker_out }} 2>&1
        chdir: "{{ remote_working_dir_filechecker }}"
      when: do_restore and restore_delete

    - name: Trasferisci report nello storage condiviso
      ansible.builtin.copy:
        src: "{{ path_report }}"
        dest: /mnt/shared/
        remote_src: true
      when: do_check or do_restore

    - name: Trasferisci report-shards nello storage condiviso
      ansible.builtin.copy:
        src: "{{ path_report_shards }}"
        dest: /mnt/shared/
        remote_src: true
      when: do_restore

    #- name: Smonta disco Windows
    #  ansible.posix.mount:
    #    path: "{{ path_mnt_win }}"
    #    state: unmounted

    - name: Find all log files in windows
      ansible.builtin.find:
        paths: /mnt/win10/Users/
        patterns: 'log*.txt'
        recurse: false
      register: log_files

    - name: Transfer log files to local
      ansible.builtin.fetch:
        src: "{{ item.path }}"
        dest: "{{ local_working_directory }}out/{{ name_ransomware }}/"
        flat: yes
      loop: "{{ log_files.files }}"
      when: do_restore

    - name: Transfer output to local
      ansible.builtin.fetch:
        src: "{{ item }}"
        dest: "{{ local_working_directory }}out/{{ name_ransomware }}/"
        # otherwise, there would be conflicts for files having the same names on different nodes
        flat: no
      loop:
        - "{{ path_report }}"
        - "{{ path_report_shards }}"
        - "{{ remote_working_directory_checker }}cleanWindowsChecksum"
        - "{{ path_log_filechecker }}"
        - "{{ path_log_filechecker_out }}"
      when: do_restore

    - name: Smonta storage condiviso
      ansible.posix.mount:
        path: /mnt/shared
        state: unmounted
