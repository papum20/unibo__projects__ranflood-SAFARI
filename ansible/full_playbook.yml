#/******************************************************************************
# * Copyright 2021 (C) by Tommaso Compagnucci <tommasocompagnucci1@gmail.com>  *
# *                                                                            *
# * This program is free software; you can redistribute it and/or modify       *
# * it under the terms of the GNU Library General Public License as            *
# * published by the Free Software Foundation; either version 2 of the         *
# * License, or (at your option) any later version.                            *
# *                                                                            *
# * This program is distributed in the hope that it will be useful,            *
# * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              *
# * GNU General Public License for more details.                               *
# *                                                                            *
# * You should have received a copy of the GNU Library General Public          *
# * License along with this program; if not, write to the                      *
# * Free Software Foundation, Inc.,                                            *
# * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.                  *
# *                                                                            *
# * For details about the authors of this software, see the AUTHORS file.      *
# ******************************************************************************/

- hosts: localhost
  tasks:

    - name: Add VMs to inventory
      import_tasks: playbooks/tasks/inventory-add-vms.yml

    - name: Make sure VMs are running
      import_tasks: playbooks/tasks/vm-started.yml


    - name: Test wsl
      ansible.builtin.command: sshpass -pPassw0rd! ssh -o StrictHostKeyChecking=no IEUser@{{ item }} wsl --help
      loop: "{{ vm_ips }}"
      ignore_errors: true
      failed_when: false


- hosts: windows
  tasks:

    #- name: Test wsl
    #  ansible.windows.win_shell: 'wsl'
    #  ignore_errors: true
    #  failed_when: false
#
    #- name: Test wsl log
    #  ansible.windows.win_shell: 'type {{ remote_working_directory_win }}\test_wsl.log'
    #  register: command_output_test_wsl_log
    #  failed_when: false
#
    #- name: Display the output of the command (test wsl)
    #  ansible.builtin.debug:
    #    msg: "{{ command_output_test_wsl_log.stdout_lines }}"
    #  failed_when: false
#
    #- name: Fetch test wsl log
    #  ansible.builtin.fetch:
    #    src: '{{ remote_working_directory_win }}\test_wsl.log'
    #    dest: "{{ local_working_directory }}"
    #    flat: true
    #  failed_when: false

    # From documentation:
    # If path is a directory, it is copied (including the source folder name) recursively to dest.
    # If path is a directory and ends with “/”, only the inside contents of that directory are copied to the destination.
    # Otherwise, if it does not end with “/”, the directory itself with all contents is copied.

    - name: Transfer ansible files
      ansible.windows.win_copy:
        src: "{{ local_working_directory }}{{ item }}"
        dest: "{{ remote_working_directory_win }}{{ item }}"
        force: "true"
      loop:
        - "{{ name_internal_playbook }}"
        - "{{ name_internal_inventory }}"

    - name: Transfer ansible variables
      ansible.windows.win_copy:
        src: "{{ local_working_directory }}{{ dir_variables }}{{ item }}"
        dest: "{{ remote_working_directory_win }}{{ item }}"
        force: "true"
      loop:
        - "{{ name_ansible_variables }}"
        - "{{ name_ansible_variables_internal }}"

    - name: Transfer executable files and scripts
      ansible.windows.win_copy:
        src: "{{ local_working_directory }}{{ local_path_files_transfer }}/"
        dest: "{{ remote_working_directory_win }}"
        force: "true"

    - name: Transfer prepopulate files and scripts
      ansible.windows.win_copy:
        src: "{{ local_working_directory }}{{ local_path_files_prepopulate }}/"
        dest: "{{ remote_working_directory_win }}"
        force: "true"
      when: prepopulate_wsl

    - name: Transfer (heavy) executable files and scripts (ranflood, ransomware)
      ansible.windows.win_copy:
        src: "{{ local_working_directory }}{{ item.src }}"
        dest: "{{ item.dst }}"
        force: "{{ transfer_force }}"
      loop:
        - { src: "{{ local_path_files_ranflood }}/", dst: "{{ path_ranflood_dir_win }}" }
        - { src: "{{ local_path_files_ransomwares }}/{{ name_ransomware_zip }}", dst: "{{ remote_working_directory_win }}" }

    - name: Prepopulate the disk
      ansible.windows.win_command:
        cmd: "{{ remote_working_directory_win }}{{ name_prepopulate_script }}"
      when: prepopulate_wsl

    #- name: Launch internal playbook
    #  # escape special chars with ^
    #  ansible.windows.win_shell: >
    #      wsl ansible-playbook -vvv
    #      -i "{{ remote_working_directory_linux }}{{ name_internal_inventory }}"
    #      "{{ remote_working_directory_linux }}{{ name_internal_playbook }}"
    #      --extra-vars "@{{ remote_working_directory_linux }}{{ name_ansible_variables }}"
    #      --extra-vars "@{{ remote_working_directory_linux }}{{ name_ansible_variables_internal }}"
    #      > {{ path_log_win }} 2>&1
    #  async: 3600
    #  poll: 0
    #  register: command_output

    - name: Launch internal playbook
      # escape special chars with ^
      ansible.windows.win_command:
        cmd: 'wsl ansible-playbook -vvv -i "{{ remote_working_directory_linux }}{{ name_internal_inventory }}" "{{ remote_working_directory_linux }}{{ name_internal_playbook }}" --extra-vars "@{{ remote_working_directory_linux }}{{ name_ansible_variables }}" --extra-vars "@{{ remote_working_directory_linux }}{{ name_ansible_variables_internal }}"'
      async: 3600
      poll: 0
      register: command_output


    #
    # Checks
    #

    # checks only if not disabling network

    ##- name: Wait for ransomware files to be created 
    ##  ansible.builtin.pause:
    ##    seconds: 60

    ##- name: Check for ransomware dir
    ##  ansible.windows.win_stat:
    ##    path: "{{ path_ransomware_dir_win }}"
    ##  register: internal_file

    ##- name: Fail if ransomware dir was not created by internal playbook
    ##  ansible.builtin.fail:
    ##    msg: "WSL error (ransomware dir doens't exist)"
    ##  when: internal_file.stat.exists

    ##- name: Find files in ransomware dir
    ##  ansible.windows.win_find:
    ##    paths: "{{ path_ransomware_dir_win }}"
    ##  register: ransomware_dir_contents
    ##  when: internal_file.stat.exists

    ##- name: Fail if ransomware dir is empty
    ##  ansible.builtin.fail:
    ##    msg: "The directory {{ path_ransomware_dir_win }} is empty."
    ##  when: ransomware_dir_contents.matched == 0


- hosts: localhost
  tasks:

    - name: Shutdown VMs
      import_tasks: playbooks/tasks/vm-shutdown.yml
      when: shutdown

