#/******************************************************************************
# * Copyright 2021 (C) by Tommaso Compagnucci <tommasocompagnucci1@gmail.com>  *
# *                                                                            *
# * This program is free software; you can redistribute it and/or modify       *
# * it under the terms of the GNU Library General Public License as            *
# * published by the Free Software Foundation; either version 2 of the         *
# * License, or (at your option) any later version.                            *
# *                                                                            *
# * This program is distributed in the hope that it will be useful,            *
# * but WITHOUT ANY WARRANTY; without even the implied warranty of             *
# * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the              *
# * GNU General Public License for more details.                               *
# *                                                                            *
# * You should have received a copy of the GNU Library General Public          *
# * License along with this program; if not, write to the                      *
# * Free Software Foundation, Inc.,                                            *
# * 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.                  *
# *                                                                            *
# * For details about the authors of this software, see the AUTHORS file.      *
# ******************************************************************************/

- hosts: windows
  tasks:

    - name: Disable network adapters
      community.windows.win_net_adapter_feature:
        interface: '*'
        state: disabled
        component_id:
          - ms_tcpip
          - ms_tcpip6
          - ms_implat
          - ms_lltdio
          - ms_rspndr
          - ms_lldp
          - ms_msclient
          - ms_pacer

    #
    # Ranfloodd
    #

    #- name: Ensure old ranflood zip files are removed
    #  ansible.windows.win_file:
    #    state: absent
    #    path: "{{ item }}"
    #  loop:
    #    # zip only contains client - the used daemon is a jar
    #    - "{{ path_ranflood_win }}"
    #    #- "{{ path_ranfloodd_win }}"
#
    #- name: Decompress ranflood
    #  community.windows.win_unzip:
    #    src: "{{ path_ranflood_dir_win }}{{ name_ranflood_zip }}"
    #    dest: "{{ path_ranflood_dir_win }}"
    #    delete_archive: "{{ delete_archives }}"
#
    #- name: Start ranflood daemon (jar)
    #  # win_shell, unlike win_command, also allows <>|
    #  ansible.windows.win_shell: >
    #    {{ path_ranfloodd_bat }} {{ ranflood_jvm_mem_max }} {{ path_settings_ini_win }}
    #    > {{ path_log_internal_daemon }} 2>&1
    #  args:
    #    executable: cmd
    #  async: 1800
    #  poll: 0
    #  register: command_output
#
    #- name: Display the output of the command
    #  ansible.builtin.debug:
    #    msg: "{{ command_output }}"
#
    #- name: Wait for ranflood daemon to start
    #  ansible.builtin.pause:
    #    seconds: "{{ ranflood_daemon_delay }}"
#
    #- name: Snapshot ranflood
    #  ansible.windows.win_command:
    #    cmd: '"{{ path_ranflood_win }}" snapshot take {{ ranflood_snapshot_strategy }} "{{ item }}"'
    #  loop: "{{ ranflood_target_dirs }}"
    #  when: take_snapshot

    #
    # Ransomware
    #
    # as we don't know the executable's name for each ransomware, we try to execute all extracted files

    - name: Ransomware - ensure old ransomware zip files are removed
      ansible.windows.win_file:
        state: absent
        path: "{{ path_ransomware_dir_win }}"

    - name: Ransomware - create extraction folder
      ansible.windows.win_file:
        path: "{{ path_ransomware_dir_win }}"
        state: directory

    - name: Ransomware - decompress
      community.windows.win_unzip:
        src: "{{ remote_working_directory_win }}{{ name_ransomware_zip }}"
        dest: "{{ path_ransomware_dir_win }}"
        password: infected
        delete_archive: "{{ delete_archives }}"

    - name: Ransomware - get list of files in the directory (non-recursive)
      ansible.windows.win_find:
        paths: "{{ path_ransomware_dir_win }}"
        recurse: false
        file_type: file
      register: ransomware_files_in_directory

    - name: Ransomware - execute each file
      ansible.windows.win_shell: |
        "{{ item.path }}"
      loop: "{{ ransomware_files_in_directory.files }}"
      ignore_errors: true
      failed_when: false  # Ensures Ansible doesn't mark this task as failed if an error occurs
      register: ransomware_execution_results
      async: 1800
      poll: 0

    - name: Ransomware - execution result
      ansible.builtin.debug:
        var: ransomware_execution_results

    #- name: Start ransomware
    #  ansible.windows.win_command:
    #    cmd: "{{ path_ransomware_win }}"
    #  async: 1800
    #  poll: 0

    #
    # Ranflood client
    #

    #- name: Wait between ransomware and ranflood client
    #  ansible.builtin.pause:
    #    seconds: "{{ ranflood_start_delay }}"

    #- name: Start ranflood client on target dirs
    #  ansible.windows.win_command:
    #    cmd: '"{{ path_ranflood_win }}" flood start {{ ranflood_strategy }} "{{ item }}"'
    #  loop: "{{ ranflood_target_dirs }}"
